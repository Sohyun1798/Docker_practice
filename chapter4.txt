# 4.1 Docker 이미지 조작

* 이미지 다운로드

- docker image pull [option] 이미지명[:태그명]
cf) docker 이미지 명에 이미지를 취득할 URL 지정 가능.
ex) docker image pull centos:7
    docker image pull -a centos
    docker image pull gcr.io.tensorflow/tensorflow

* 이미지 목록 표시

- doker image ls [option] [repository name]

- option:
  -all, -a : 모든 이미지 표시
  --digests : 다이제스트(이미지를 고유하게 식별하기 위한 것)를 표시할지 말지
  --no-trunc : 결과를 모두 표시
  --quiet, -q : Docker 이미지만 표시

- result:
  repository : 이미지 이름
  TAG : 이미지 태그명
  IMAGE ID : 이미지 ID
  CREATED : 작성일
  SIZE : 이미지 크기

* Docker content trust(DCT)

- DCT 기능 유효화: $ export DOCKER_CONTENT_TRUST=1
- DCT 기능 무효화: $ export DOCKER_CONTENT_TRUST=0

* 이미지 상세 정보 확인

- docker image inspect 이미지명[:태그명]
- 명령을 실행하면 이미지의 상세 정보가 JSON 형식으로 표시됨. 따라서, 특정 값을 취득하고 싶을 때는 --format 옵션을 사용,
JSON 형식 데이터의 계층구조를 지정.
  ex) docker image inspect --format="{{ .Os}}" centos:7
      docker image inspect --format="{{ .ContainerConfig.Image}}" centos:7

* 이미지 태그 설정

- docker image tag <Docker Hub 사용자명>/이미지명:[태그명]
- 태그를 붙인 이미지와 원래 이미지의 image id가 같음 -> 이미지에 nickname을 준 것일 뿐, 이미지 자체를 복사하거나
이름을 바꾼 것은 아님.

* 이미지 검색

- docker search [option] <검색키워드>
- option:
  --no-turnc : 검색 결과 모두 표시
  --limit : n건의 검색 결과를 표시
  --filter=stars=n : 즐겨찾기의 수(n 이상)를 지정
- 공식 docker image 는 [OFFICIAL]이 [OK]로 표시됨.
- [AUTOMATED] : Dockerfile을 바탕으로 자동 생성된 이미지인지 아닌지

* 이미지 삭제

- docker image rm [option] 이미지명 [이미지명]
- option:
  --force, -f : 이미지를 강제로 삭제
  --no-prune : 중간 이미지를 삭제하지 않음
- 이미지명은 [REPOSITORY] 또는 [IMAGE ID]를 지정.
- 사용하지 않은 Docker image 삭제: docker image prune

* Docker Hub에 로그인/로그아웃

- docker login [option] [server] / docker logout [서버명]
- option:
  --password, -p : 비밀번호
  --username, -u : 사용자명

* 이미지 업로드

- docker image push 이미지명[:태그명]
- 업로드할 이미지 형식: <Docker Hub 사용자명>/이미지명[:태그명]

# 4.2 Docker 컨테이너 생성/시작/정지

* Docker 컨테이너의 라이프 사이클

- docker container create
 + 컨테이너 생성. 이미지로부터 컨테이너를 생성함.
 + 이미지는 Docker에서 서버 기능을 작동시키기 위해 필요한 (Linux 작동에 필요한 /etc나 /bin등과 같은) 디렉토리 및 파일들.
 + 명령을 실행하면 이미지에 포함될 linux의 디렉토리 파일들의 스냅샷(스토리지 안에 존재하는 파일과 디렉토리를 특정 타이밍에
   추출한 것)을 취함.
 + 컨테이너를 작성하기만 할 뿐, 컨테이너를 시작하지는 않음.

- docker container run [option] 이미지명[:태그명] [인수]
 + 컨테이너 생성 및 시작
 + 이미지로부터 컨테이너 생성, 컨테이너 상에서 임의 프로세스 시작
 + 리눅스의 프로세스 관리와 마찬가지로 Nginx 등의 서버 프로세스를 백그라운드에서 항시 실행하거나, 강제종료 가능
 + 포트 번호와 같은 네트워크를 설정함으로써 외부에서 컨테이너 프로세스에 액세스할 수 있음.

 + option
   --attach, -a : 표준 입력(STDIN), 표준 출력(STDOUT), 표준 오류 출력(STDERR)에 attach
   --cidfile : 컨테이너 ID를 파일로 출력
   --detach, -d : 컨테이너를 생성, 백그라운드에서 실행
   --interactive, -l : 컨테이너의 표준 입력 열기(표준 출력은 -i)
   --tty, -t : 단말기 디바이스 사용

 + 백그라운드 실행 옵션: 확인시 docker container logs -t [컨테이너ID], -t : timestamp 표시
   --detach, -d : 백그라운드에서 실행
   --user, -u : 사용자명을 지정
   --restart=[no | on-failure | on-failure:횟수n | always | unless-stopped] : 명령 실행 결과에 따른 재시작
     no : 재시작하지 않는다.
     on-failure : 종료 스테이터스가 0이 아닐 때 재시작한다.
     on-failure:횟수n : 종료 스테이터스가 0이 아닐 때 n번 재시작한다.
     always : 항상 재시작한다.
     unless-stopped : 최근 컨테이너가 정지 상태가 아니라면 항상 재시작한다.
   --rm : 명령 실행 완료 후에 컨테이너 자동으로 삭제
 
 + 네트워크 설정: docker container run [네트워크 옵션] 이미지명[:태그명] [인수]
   --add-host=[호스트명:IP주소]
   --dns=[IP주소]
   --expose : 지정한 범위의 포트 번호를 할당
   --mac-address=[MAC주소] : 컨테이너의 MAC주소를 지정
   --net=[bridge | none | container:<name | id> | host | NETWORK]
     bridge : 브리지 연결(기본값) 사용
     none : 네트워크에 연결하지 않음
     container:[name | id] : 다른 컨테이너의 네트워크 사용
     host: 컨테이너가 호스트 os의 네트워크 사용
     NETWORK : 사용자 정의 네트워크 사용
     ex) docker container create -d bridge webap-net
         docker container run -net=webap-net -it centos
   --hostname, -h
   --publish, -p[호스트의 포트 번호]:[컨테이너의 포트 번호]
   --publish-all, -p : 호스트의 임의의 포트를 컨테이너에 할당
   ex) docker container run -d -p 8080:80 nginx
       docker container run -d --dns 192.168.1.1 nginx
       docker container run -d --mac-address="92:d0:c6:0a:29:33" centos
       docker container run -it --hostname www.test.com --add-host node1.test.com:192.168.1.1 centos
 
 + 자원을 지정하여 컨테이너 생성 및 실행: docker container run [자원 옵션] 이미지명[:태그명] [인수]
   --cpu-shares, -c : CPU의 사용 배분(비율)
   --memory, -m : 사용할 메모리를 제한하여 실행(단위는 b, k, m, g 중 하나)
   --volume=[호스트의 디렉토리]:[컨테이너의 디렉토리], -v : 호스트와 컨테이너의 디렉토리 공유
   ex) docker container run --cpu-shares=512 --memory=1g centos
       docker container run -v /Users/asa/webap:/usr/share/nginx/html nginx

 + 컨테이너 생성 및 시작하는 환경 지정: docker container run [환경설정 옵션] 이미지명[:태그명] [인수]
   --env=[환경변수], -e
   --env-file=[파일명] : 환경변수를 파일로부터 설정
   --read-only=[true | false]
   --workdir=[패스], -w : 컨테이너의 작업 디렉토리를 지정
   -u, --user=[사용자명]
   ex) docker container run -it -e foo=bar centos bin/bash
       docker container run -it --env-file=env_list centos /bin/bash
       docker container run -it -w=/tensorflow centos /bin/bash

 + 가동 컨테이너 목록 표시: docker container ls
   --all, -a
   --filter, -f : 표시할 컨테이너 필터링
   --format : 표시 포맷을 지정
     .ID : 컨테이너ID
     .Image : 이미지ID
     .Command : 실행 명령
     .CreatedAt : 컨테이너 작성 시간
     .RunningFor : 컨테이너 가동 시간
     .Ports : 공개 포트
     .Status : 컨테이너 상태
     .Size : 컨테이너 디스크 크기
     .Names : 컨테이너명
     .Mounts : 볼륨 마운트
     .Networks : 네트워크명

   --last, -n : 마지막으로 실행된 n건의 컨테이너만 표시
   --latest, -l : 마지막으로 실행된 컨테이너만 표시
   --no-trunc : 정보를 생략하지 않고 표시
   --quiet, -q : 컨테이너ID만 표시
   --size, -s : 파일 크기 표시
   ex) docker container ls -a -f name=test1
       docker container ls -a -f exited=0
       docker container ls -a --format "{{.Names}}: {{.Status}}"
       docker container ls -a --format "table {{.Names}}\t{{.Status}}\t {{.Mounts}}"

 + 컨테이너 가동 확인: docker container stats [컨테이너 식별자]
   ctrl + c 로 명령 종료

- docker container start [option] <컨테이너 식별자> [컨테이너 식별자]
 + 정지 중인 컨테이너 시작
 + 컨테이너에 할당된 컨테이너 식별자를 지정하여 컨테이너 시작
 + options
   --attach, -a : 표준 출력, 표준 오류 출력 열기
   --interactive, -l : 컨테이너 표준 입력 열기
   
- docker container stop [option] <컨테이너 식별자> [컨테이너 식별자]
 + 실행 중인 컨테이너 정지
 + 컨테이너에 할당된 컨테이너 식별자를 지정하여 컨테이너 정지
 + 컨테이너 삭제 시 stop 명령을 사용해 실행 중인 컨테이너 정지
 + options
   --time, -t : 컨테이너 정지 시간을 지정(기본값 10초)

- docker container restart [option] <컨테이너 식별자> [컨테이너 식별자]
 + 컨테이너 재시작
 + options
   --time, -t : 컨테이너 재시작 시간 지정(기본값 10초)

- docker container rm [option] <컨테이너 식별자> [컨테이너 식별자]
 + 컨테이너 삭제
 + options
   --force, -f : 실행 중인 컨테이너 강제로 삭제
   --volumes, -v : 할당한 볼륨 삭제

- docker container ps
 + 컨테이너 상태 확인

- docker container pause <컨테이너 식별자>
 + 컨테이너 일시 정지

 # 4.3 Docker 컨테이너 네트워크

 - 네트워크를 명시적으로 지정하지 않고 Docker 컨테이너 시작: 기본값인 

 - 네트워크 목록 표시: docker network ls [option]
  + options
    -f, --filter=[] : 출력을 필터링함
      driver : 드라이버 지정
      id : 네트워크 ID
      label : 네트워크에 설정된 라벨(label=<key> 또는 label=<key>=<value>로 지정)
      name : 네트워크명
      scope : 네트워크 스코프(swarm/global/local)
      type : 네트워크 타입(사용자 정의 네트워크 custom/정의 완료 네트워크 builtin)
      ex) docker network ls -q --filter driver=bridge
    --no-trunc : 상세 정보 출력
    -q, --quiet : 네트워크 ID만 표시

 - 네트워크 작성: docker network create [옵션] 네트워크
  + options
    --driver, -d : bridge 또는 overlay(기본값은 bridge, 커스텀 네트워크 드라이버도 사용 가능)
                   overlay 네트워크는 여러개의 호스트에 걸쳐 있는 네트워크를 말함.
    --ip-range : 컨테이너에 할당하는 IP 주소 범위를 지정
    --subnet : 서브넷을 CIDR 형식으로 지정
    --ipv6 : IPv6 네트워크를 유효화할지 말지(true/false)
    -label : 네트워크에 설정하는 라벨
    ex) docker network create --driver=bridge web-network

- 네트워크 연결: docker network connect/disconnect [option] 네트워크 컨테이너
 + options
   --ip : IPv4 주소
   --ip6 : IPv6 주소
   --alias : 앨리어스명
   --link : 다른 컨테이너에 대한 링크
   ex) docker network connect/disconnect web-network webfront

 + 네트워크에 대한 연결은 컨테이너 시작 시에 할 수도 있음.
   ex) docker container run -itd --name=webap --net=web-network nginx

- 네트워크 상세 정보 확인: docker network inspect [option] 네트워크

- 네트워크 삭제: docker network rm [option] 네트워크
  ex) docker network rm web-network

# 4.4 가동 중인 Docker 컨테이너 조작

- 가동 컨테이너 연결: docker container attach
 + 연결한 컨테이너를 종료하려면 ctrl+C
 + 컨테이너를 시작한 채로 컨테이너 안에서 움직이는 프로세스만 종료하려면 ctrl+P, ctrl+Q

- 가동 컨테이너에서 프로세스 실행: docker container exec [option] <컨테이너 식별자> <실행할 명령> [인수]
 + options
   --detach, -d : 명령을 백그라운드에서 실행한다.
   --interactive, -i : 컨테이너의 표준 입력을 연다.
   --tty, -t : tty(단말 디바이스)를 사용한다.
   --user, -u : 사용자명을 지정한다.
 ex) docker container exec -it webserver /bin/bash
     docker container exec -it webserver /bin/echo "Hello world"

- 가동 컨테이너의 프로세스 확인: docker container top [컨테이너명]

- 가동 컨테이너의 포트 전송 확인: docker container port [컨테이너명]

- 컨테이너 이름 변경: docker container rename [old] [new]

- 컨테이너 안의 파일 복사: docker container cp
 + 컨테이너에서 호스트로: docker container cp <컨테이너 식별자>:<컨테이너 안의 파일 경로> <호스트의 디렉토리 경로>
 + 호스트에서 컨테이너로: docker container cp <호스트의 파일> <컨테이너 식별자>:<컨테이너 안의 파일 경로>

- 컨테이너 조작의 차분 확인: docker container diff <컨테이너 식별자>
 + A: 파일 추가
 + D: 파일 삭제
 + C: 파일 수정

# 4.5 Docker 이미지 생성

- 컨테이너로부터 이미지 작성: docker container commit [옵션] <컨테이너 식별자> [이미지명[:태그명]]
 + options
   --author, -a: 작성자 지정
   --message, -m: 메시지 지정
   --change, -c: 커미트 시 Dockerfile 명령을 지정
   --pause, -p: 컨테이너를 일시 정지하고 커미트
 ex) docker container commit -a "Sohyun" webserver sohyun/webfront:1.0

- 컨테이너를 tar 파일로 출력: docker container export <컨테이너 식별자>
 ex) docker container export webserver > latest.tar

- tar 파일로부터 이미지 작성: docker image import <파일 또는 URL> | - [이미지명[:태그명]]
 + docker image import 명령에서 지정할 수 있는 파일은 하나 뿐! -> tar 명령으로 파일 모아둘 것
 + root 권한으로 실행하지 않을 시 액세스 권한이 없는 파일은 포함되지 않는 경우 발생
 ex) cat latest.tar | docker image import - sohyun/webfront:1.1

- 이미지 저장: docker image save [option] <저장 파일명> [이미지명]
 + Docker 이미지를 tar 파일로 저장.
 + 저장할 파일명: -o 로 지정
 ex) docker image save -o export.tar tensorflow

- 이미지 읽어들이기: docker image load [option]
 + tar 이미지로부터 이미지 읽어들이기
 + 읽어 들일 파일명: -i 로 지정
 ex) docker image load -i export.tar

- 불필요한 이미지/컨테이너 일괄 삭제: docker system prune [option]
 + options
   --all, -a: 사용하지 않는 리소스 모두 삭제
   --force, -f: 강제적으로 삭제