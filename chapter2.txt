# 2.1 컨테이너 기술의 개요

* 컨테이너
- 호스트 os 상에 논리적인 구획을 만들고 애플리케이션을 작동시키기 위해 필요한 라이브러리나 애플리케이션등을 하나로 모아
마치 별도의 서버인 것처럼 사용할 수 있게 만든 것
- 애플리케이션의 실행에 필요한 모듈을 컨테이너로 모을 수 있기 때문에 여러 개의 컨테이너를 조합하여 하나의 어플리케이션을
구축하는 마이크로 서비스형 어플리케이션과 친화성이 높음.
- 애플리케이션 이식성(portability)

# 2.3 Docker의 기능

* Build
- Docker는 애플리케이션의 실행에 필요한 프로그램 본체, 라이브러리, 미들웨어, os나 네트워크 설정 등을 하나로 모아서
Docker 이미지를 만듦.
- 하나의 이미지에는 하나의 애플리케이션만, 여러 개의 컨테이너를 조합하여 서비스를 구축하는 방법 권장.
- Docker 이미지는 Docker 명령을 사용하여 수동으로 만들 수도 있지만, Dockerfile이라는 설정 파일을 만들어 자동으로
이미지를 만들 수도 있음.
- Docker 이미지 겹쳐 쓰는 것 가능.

* Ship: 이미지를 공유하는 기능

* Run: 컨테이너를 작동시키는 기능
- Docker는 하나의 리눅스 커널을 여러 개의 컨테이너에서 공유. 컨테이너 안에서 작동하는 프로세스를 하나의 그룹으로 관리,
그들마다 각각 파일 시스템이나 호스트명, 네트워크 등을 할당. -> 이게 다르면 프로세스나 파일에 대한 액세스 불가.
- 이러한 구조를 사용하여 컨테이너를 독립된 공간으로서 관리. 이를 실행하기 위해 리눅스 커널 기능 기술이 사용

* Docker component

- Docker Engine(Docker의 핵심기능): Docker image 생성, 컨테이너 가동을 위한 Docker의 핵심 기능.
Docker 명령의 실행이나 Dockerfile에 의한 이미지도 생성.

- Docker Registry(이미지 공개 및 공유): 컨테이너의 바탕이 되는 Docker 이미지를 공개 및 공유하기 위한 레지스트리 기능.

- Docker Compose(컨테이너 일원 관리): 여러 개의 컨테이너 구성 정보를 코드로 정의하고, 명령을 실행함으로써 애플리케이션의
실행 환경을 구성하는 컨테이너들을 윌원 관리하기 위한 툴

- Docker Machine(Docker 실행 환경 구축): 로컬 호스트용인 VirtualBox를 비롯하여 Amazon Web Services EC2나
Microsoft Azure와 같은 클라우드 환경에 Docker의 실행 환경을 명령으로 자동 생성하기 위한 툴

- Docker Swarm(클러스터 관리): 여러 Docker 호스트를 클러스터화 하기 위한 툴. 클러스터를 관리하거나 API를 제공하는
역할은 Manager가, Docker 컨테이너를 실행하는 역할은 Node가 담당.

# 2.4 Docker의 작동 구조

* namespace(컨테이너 구획화): 리눅스 커널의 namespace 기능은 리눅스 오브젝트에 이름을 붙임으로써 다음과 같은 6개의
독립된 환경을 구축.

- PID namespace: PID 는 각 프로세스에 할당된 고유의 ID. namespace가 다른 프로세스끼리는 서로 액세스 할 수 없음.

- Network namespace: 네트워크 디바이스, IP주소, 포트 번호, 라우팅 테이블, 필터링 테이블 등과 같은 네트워크 리소스를
격리된 namespace 마다 독립적으로 가질 수 있음. -> 호스트 os 상에서 사용 중인 포트가 있더라도 컨테이너 안에서 동일한 번호의
포트 사용 가능.

- UID namespace: UID, GID를 namespace 별로 독립적으로 가질 수 있음. namespace 안과 호스트 os상의 UID/GID가
서로 연결되어 namespace 안과 밖에서 서로 다른 UID/GID를 가질 수 있음. -> namespace 안의 관리자 계정은 호스트 os에
대해서는 관리 권한을 일절 갖지 않음.

- Mount namespace: namespace 안에 격리된 파일 시스템 트리를 만듦. namespace 안에서 수행한 마운트는 호스트 os나 다른 
namespace 안에서는 액세스할 수 없음.

- UTS namespace: namespace 별로 호스트명이나 도메인명을 독자적으로 가질 수 있음.

- IPC namespace: 프로세스간의 통신(IPC) 오브젝트를 namespace 별로 독립적으로 가질 수 있음.

* cgroups(릴리스 관리 장치): control groups(cgroups) 기능을 사용하여 자원 할당 관리. cgroups의 부모자식 관계에서는
자식이 부모의 제한을 물려받음.

- cpu: cpu 사용량을 제한
- cpuacct: cpu 사용량 통계 정보를 제공
- cpuset: cpu나 메모리 배치를 제어
- memory: 메모리나 스왑 사용량을 제한
- devices: 디바이스에 대한 액세스 허가/거부
- freezer: 그룹에 속한 프로세스 정지/재개
- net_cls: 네트워크 제어 태그를 부가
- blkio: 블록 디바이스 입출력량 제어

* 네트워크 구성(가상 브리지/가상 NIC): 리눅스는 Docker를 설치하면 서버의 물리 NIC가 docker0이라는 가상 브리지 네트워크로
연결됨. Docker 컨테이너가 실행되면 컨테이너에 172.17.0.0/16이라는 서브넷 마스크를 가진 프라이빗 IP 주소가 eth0으로 자동
할당됨.

